plugins {
  id 'java'
}
apply from: "https://raw.githubusercontent.com/gocd/gocd-plugin-gradle-task-helpers/master/helper.gradle?_=${(int) (new Date().toInstant().epochSecond / 60)}"

gocdPlugin {
    id = 'yaml.config.plugin'
    pluginVersion = '1.0.0'
    goCdVersion = '22.1.0'
    name = 'YAML Configuration Plugin'
    description = 'GoCD pipelines and environments configuration in YAML'
    vendorName = 'Tomasz Setkowski'
    vendorUrl = 'https://github.com/tomzo/gocd-yaml-config-plugin'

    githubRepo {
        owner = System.getenv('GITHUB_USER') ?: 'bob'
        repo = 'gocd-yaml-config-plugin'
        token = System.getenv('GITHUB_TOKEN') ?: 'bad-token'
    }

    pluginProject = project

    prerelease = !"No".equalsIgnoreCase(System.getenv('PRERELEASE'))
    assetsToRelease = [project.tasks.jar]
}

group = 'cd.go.plugin.config.yaml'
version = gocdPlugin.fullVersion(project)

repositories {
    mavenCentral()
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

tasks.withType(JavaCompile).configureEach {
    options.release = 17
}

ext {
    pluginApiVersion = '25.3.0'
}

dependencies {
    implementation 'com.google.code.gson:gson:2.13.2'
    implementation 'org.apache.ant:ant:1.10.15'
    implementation 'com.beust:jcommander:1.82'
    implementation 'com.contrastsecurity:yamlbeans:1.17'
    implementation 'org.yaml:snakeyaml:2.5'

    compileOnly "cd.go.plugin:go-plugin-api:$pluginApiVersion"
    testImplementation "cd.go.plugin:go-plugin-api:$pluginApiVersion"

    testImplementation platform('org.junit:junit-bom:6.0.0')
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.mockito:mockito-core:5.20.0'
    testImplementation 'org.hamcrest:hamcrest:3.0'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed", "standardOut"
    }
}

// create a fat jar with all dependencies
jar {
    archiveBaseName = project.name
    preserveFileTimestamps = false
    reproducibleFileOrder = true
    duplicatesStrategy = DuplicatesStrategy.INCLUDE

    manifest {
        attributes 'Main-Class': 'cd.go.plugin.config.yaml.cli.YamlPluginCli'
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    exclude "allow.class" // Noise from Ant
    exclude "META-INF/*.txt"
    exclude "META-INF/*.LIST"
    exclude "META-INF/versions/**"
}
